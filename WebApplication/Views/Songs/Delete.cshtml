@using CW.Soloist.WebApplication.Controllers;
@model CW.Soloist.WebApplication.ViewModels.SongViewModel

@{
    ViewBag.Title = "Delete Song";
    string termStyle = "text-align: left; color:#b6ff00;";
    CultureInfo timeStampCulture = CultureInfo.CreateSpecificCulture("en-DE");
    string collapseStyle = "color:#b6ff00; background-color:transparent; border-color:yellow;";
}

<h1 style="color:gold">@ViewBag.Title</h1>

<h3>Are you 100% <b><i> sure</i></b> you want to delete this song?</h3>
<div>

    @Html.ValidationSummary()

    <!-- Song Artist and Title -->
    <div>
        <dl class="dl-horizontal">
            <!-- Artist -->
            <dt style="@termStyle">@Html.DisplayNameFor(m => m.Artist)</dt>
            <dd> @Html.DisplayFor(m => m.Artist)</dd>

            <!-- Song Title -->
            <dt style="@termStyle">@Html.DisplayNameFor(m => m.Title) </dt>
            <dd> @Html.DisplayFor(m => m.Title)</dd>
        </dl>
    </div>

    <!-- Desciprtion List of The Additional Properties   -->
    <div>
        <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle Song Properties </button>
        <div style="display:none">
            <dl class="dl-horizontal">
                <!-- Chord Progression File -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.ChordsFileHandler) </dt>
                <dd> @Html.ActionLink(Model.ChordsFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.ChordProgressionFile })</dd>

                <!-- Original MIDI File -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.MidiFileHandler) </dt>
                <dd> @Html.ActionLink(Model.MidiFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.MidiOriginalFile }) </dd>

                <!-- Playback MIDI File -->
                <dt style="@termStyle">@Html.DisplayNameFor(m => m.MidiPlaybackFileName) </dt>
                <dd> @Html.ActionLink(Model.MidiPlaybackFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.MidiPlaybackFile })</dd>

                @{
                    if (Model.MidiData != null)
                    {
                        <!-- Key Signature -->
                        <dt style="@termStyle"> Key Signature </dt>
                        <dd> @Model.MidiData.KeySignature.ToString() </dd>

                        <!-- Number Of Bars -->
                        <dt style="@termStyle"> Number Of Bars </dt>
                        <dd>  @Model.MidiData.NumberOfBars </dd>

                        <!-- BPM -->
                        <dt style="@termStyle"> Beats Per Minute </dt>
                        <dd>  @Model.MidiData.BeatsPerMinute </dd>

                        <!-- Lowest Pitch -->
                        <dt style="@termStyle"> Lowest Pitch </dt>
                        <dd>  @Model.MidiData.LowestPitch.GetDisplayName() </dd>

                        <!-- Highest Pitch -->
                        <dt style="@termStyle"> Highest Pitch </dt>
                        <dd>  @Model.MidiData.HighestPitch.GetDisplayName() </dd>
                    }
                }

                <!-- Melody Track Index -->
                <dt style="@termStyle">@Html.DisplayNameFor(m => m.MelodyTrackIndex)</dt>
                <dd>  @Model.MelodyTrackIndexDescription </dd>

                <!-- Created -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.Created)</dt>
                <dd>  @Model.Created.ToString("F", timeStampCulture) </dd>

                <!-- Modified -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.Modified)</dt>
                <dd>  @Model.Modified.ToString("F", timeStampCulture) </dd>
            </dl>
        </div> <br /> <br />
    </div>

    <!-- MIDI Tracks Table -->
    <div>
        @{
            if (Model.MidiData != null)
            {
                <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle MIDI Tracks</button>
                <div style="display:none">
                    <table class="table table-bordered table-responsive table-hover">
                        <thead>
                            <tr style="color:gold">
                                <th> Track Number </th>
                                <th> Track Name </th>
                                <th> Instrument Description </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 1; i < Model.MidiData?.Tracks.Count; i++)
                            {
                                var track = Model.MidiData?.Tracks[i];
                                <tr>
                                    <td> @track.TrackNumber </td>
                                    <td> @track.TrackName </td>
                                    <td> @track.InstrumentName </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <br /> <br />
            }
        }
    </div>

    <!-- Chord Progression Text Area -->
    <div>
        @{
            if (!string.IsNullOrEmpty(Model.ChordProgression))
            {
                <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle Chord Progression</button>
                <div style="display:none">
                    @Html.TextAreaFor(m => m.ChordProgression, 16, 80, new { @class = "green-border-focus", Style = "max-width: 40%; overflow=auto;", Spellcheck = "false", Readonly = true });
                </div>
                <br /><br />
            }
        }
    </div>

    <!-- Delete Form -->
    <div>
        <hr />
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-actions no-color">
                <input type="submit" value="Delete  " class="btn btn-danger btn-lg" />
            </div>
        }
    </div>

    <!-- Footer Links -->
    <div>
        <footer>
            <br />
            <!-- Compose -->
            <text> || </text>
            @Html.ActionLink("Compose ♫♪", nameof(Composition.Compose), nameof(Composition), new { songId = Model.Id }, null)
            <text> || </text>

            <!-- Details -->
            @Html.ActionLink("Details", "Details", new { id = Model.Id }) <text>||</text>
            
            <!-- Edit -->
            @if (Model.IsUserAuthorizedToEdit)
            {
                @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) <text>||</text>
            }

            <!-- Index -->
            @Html.ActionLink("Back to Song List", "Index") <text> || </text>
        </footer>
    </div>
</div>

<!-- js for handling collapisble elements -->
<script>
    let collapsibleElement = document.getElementsByClassName("collapsible");
    let i;

    for (i = 0; i < collapsibleElement.length; i++) {
        collapsibleElement[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else {
                content.style.display = "block";
            }
        });
    }
</script>
