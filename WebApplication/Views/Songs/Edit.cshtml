@using CW.Soloist.CompositionService.Enums;
@using CW.Soloist.WebApplication.Controllers;


@model CW.Soloist.WebApplication.ViewModels.SongViewModel

@{
    ViewBag.Title = "Edit Song";
    string labelColor = "color:#b6ff00";
    string termStyle = "text-align: left; color:#b6ff00;";
    CultureInfo timeStampCulture = CultureInfo.CreateSpecificCulture("en-DE");
    string collapseStyle = "color:#b6ff00; background-color:transparent; border-color:yellow;";
}

<h1 style="color:gold">@ViewBag.Title</h1>

@using (Html.BeginForm(
    actionName: "Edit",
    controllerName: "Songs",
    method: FormMethod.Post,
    htmlAttributes: new { enctype = "multipart/form-data" }))
{
    <!-- Update Section -->
    <div>
        @* Song Id *@
        @Html.HiddenFor(m => m.Id)

        <!-- Song Artist -->
        <div class="form-group">
            @Html.LabelFor(m => m.Artist, new { @class = "control-label", style = labelColor })
            @Html.TextBoxFor(m => m.Artist, new { @class = "form-control" })
            <div class="alert-danger">
                @Html.ValidationMessageFor(m => m.Artist)
            </div>
        </div>

        <!-- Song Title -->
        <div class="form-group">
            @Html.LabelFor(m => m.Title, new { @class = "control-label", style = labelColor })
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
            <div class="alert-danger">
                @Html.ValidationMessageFor(m => m.Title)
            </div>
        </div>

        <!-- Is Song Public -->
        @{
            @* Display edit option only if user is an admin *@
            string hidden = Model.IsAdminUser ? "" : "hidden";
        }
        <div class="checkbox" @Html.AttributeEncode(hidden)>
            <label @Html.AttributeEncode(hidden)>
                @Html.CheckBoxFor(m => m.IsPublic) Make song public to all users??
                <span class="alert-danger">
                    @Html.ValidationMessageFor(m => m.IsPublic)
                </span>
            </label>
        </div>
    </div>

    <!-- Desciprtion List of Display Only Properties -->
    <div>
        <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle Additional Properties</button>
        <div style="display:none">
            <dl class="dl-horizontal">

                <!-- Chord Progression File -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.ChordsFileHandler)</dt>
                <dd>  @Html.ActionLink(Model.ChordsFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.ChordProgressionFile }) </dd>

                <!-- Original MIDI File -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.MidiFileHandler)</dt>
                <dd> @Html.ActionLink(Model.MidiFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.MidiOriginalFile })  </dd>

                <!-- Playback MIDI File -->
                <dt style="@termStyle">@Html.DisplayNameFor(m => m.MidiPlaybackFileName)</dt>
                <dd> @Html.ActionLink(Model.MidiPlaybackFileName, nameof(SongsController.DownloadFile), new { id = Model.Id, songFileType = SongFileType.MidiPlaybackFile }) </dd>

                @* Midi metadata - assure midi data is not absent *@
                @{
                    if (Model.MidiData != null)
                    {
                        <!-- Key Signature -->
                        <dt style="@termStyle"> Key Signature </dt>
                        <dd> @Model.MidiData.KeySignature.ToString() </dd>

                        <!-- Number Of Bars -->
                        <dt style="@termStyle"> Number Of Bars </dt>
                        <dd>  @Model.MidiData.NumberOfBars </dd>

                        <!-- BPM -->
                        <dt style="@termStyle"> Beats Per Minute </dt>
                        <dd>  @Model.MidiData.BeatsPerMinute </dd>

                        <!-- Lowest Pitch -->
                        <dt style="@termStyle"> Lowest Pitch </dt>
                        <dd>  @Model.MidiData.LowestPitch.GetDisplayName() </dd>

                        <!-- Highest Pitch -->
                        <dt style="@termStyle"> Highest Pitch </dt>
                        <dd>  @Model.MidiData.HighestPitch.GetDisplayName() </dd>
                    }
                }

                <!-- Melody Track Index -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.MelodyTrackIndex)</dt>
                <dd>  @Model.MelodyTrackIndexDescription </dd>

                <!-- Created -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.Created)</dt>
                <dd>  @Model.Created.ToString("F", timeStampCulture) </dd>

                <!-- Modified -->
                <dt style="@termStyle"> @Html.DisplayNameFor(m => m.Modified)</dt>
                <dd>  @Model.Modified.ToString("F", timeStampCulture) </dd>
            </dl>
        </div>
        <br /> <br />
    </div>

    <!-- MIDI Tracks Table -->
    <div>
        @{
            if (Model.MidiData != null)
            {
                <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle MIDI Tracks</button>
                <div style="display:none">
                    <table class="table table-bordered table-responsive table-hover">
                        <thead>
                            <tr style="color:gold">
                                <th> Track Number </th>
                                <th> Track Name </th>
                                <th> Instrument Description </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 1; i < Model.MidiData.Tracks.Count; i++)
                            {
                                var track = Model.MidiData.Tracks[i];
                                <tr>
                                    <td> @track.TrackNumber </td>
                                    <td> @track.TrackName </td>
                                    <td> @track.InstrumentName </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <br /> <br />
            }
        }
    </div>

    <!-- Chord Progression Text Area -->
    <div>
        @{
            if (!string.IsNullOrEmpty(Model.ChordProgression))
            {
                <button type="button" class="collapsible" style="@collapseStyle">Display/Toggle Chord Progression</button>
                <div style="display:none">
                    @Html.TextAreaFor(m => m.ChordProgression, 16, 80, new { @class = "green-border-focus", Style = "max-width: 40%; overflow=auto;", Spellcheck = "false", Readonly = true });
                </div>
            }
        }
    </div>

    <!-- Save Button -->
    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary btn-lg btn-block center-block" />
    </div>

    @* Generate hidden form with cookie for client to check against
        when submitting the form in order to protect him from cross-
        site request forgery (CSRF) attakcs. *@
    @Html.AntiForgeryToken()
}

<!-- Footer Links -->
<div>
    <footer>
        <!-- Compose -->
        <text> || </text>
        @Html.ActionLink("Compose ♫♪", "Compose", "Composition", new { songId = Model.Id }, null)
        < text> || </text>

        <!-- Details -->
        @Html.ActionLink("Details", "Details", new { id = Model.Id }) <text>||</text>

        <!-- Delete -->
        @if (Model.IsUserAuthorizedToDelete)
        {
            @Html.ActionLink("Delete", "Delete", new { id = Model.Id }) <text>||</text>
        }

        <!-- Index -->
        @Html.ActionLink("Back to songs list", "Index") <text> || </text>
    </footer>
</div>

@* Enable Client Side Validations with JQuery of the Constraints Defined
    in the Data Annotation Attribiutes in the Model Class.  *@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}

<!-- handle collapisble elements -->
<script>
    let collapsibleElement = document.getElementsByClassName("collapsible");
    let i;

    for (i = 0; i < collapsibleElement.length; i++) {
        collapsibleElement[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else {
                content.style.display = "block";
            }
        });
    }
</script>
