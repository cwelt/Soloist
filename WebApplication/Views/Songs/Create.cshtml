@model SongViewModel

@{
    ViewBag.Title = "Upload New Song";
    string labelColor = "color:#b6ff00";
}

<h1 style="color:gold">@ViewBag.Title</h1>

@using (Html.BeginForm(
    actionName: "Create",
    controllerName: "Songs",
    method: FormMethod.Post,
    htmlAttributes: new { enctype = "multipart/form-data" }))
{
    <!-- Song Artist -->
    <div class="form-group">
        @Html.LabelFor(m => m.Artist, new { @class = "control-label", style = labelColor })
        @Html.TextBoxFor(m => m.Artist, new { @class = "form-control" })
        <div class="alert-danger">
            @Html.ValidationMessageFor(m => m.Artist)
        </div>
    </div>

    <!-- Song Title -->
    <div class="form-group">
        @Html.LabelFor(m => m.Title, new { @class = "control-label", style = labelColor })
        @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
        <div class="alert-danger">
            @Html.ValidationMessageFor(m => m.Title)
        </div>
    </div>

    <!-- Melody Track Index -->
    <div class="form-group">
        @Html.LabelFor(m => m.MelodyTrackIndex, new { @class = "control-label", style = labelColor })
        @Html.EnumDropDownListFor(m => m.MelodyTrackIndex, new { @class = "form-control"})
        <div class="alert-danger">
            @Html.ValidationMessageFor(m => m.MelodyTrackIndex)
        </div>
    </div>

    <!-- MIDI File Upload -->
    <div class="form-group">
        @Html.LabelFor(expression: m => m.MidiFileHandler, htmlAttributes: new { @class = "control-label", style = labelColor })
        @Html.TextBoxFor(m => m.MidiFileHandler, new { type = "file", @class = "form-control-file", accept = ".mid" })
        <div class="alert-danger">
            @Html.ValidationMessageFor(m => m.MidiFileHandler)
        </div>
    </div>

    <!-- Chord Progression File Upload -->
    <div class="form-group">
        @Html.LabelFor(m => m.ChordsFileHandler, new { @class = "control-label", style = labelColor })
        @Html.TextBoxFor(m => m.ChordsFileHandler, new { type = "file", @class = "form-control-file", accept = ".txt" })
        <div class="alert-danger">
            @Html.ValidationMessageFor(m => m.ChordsFileHandler)
        </div>
    </div>

    <!-- Is Song Public -->
    string hidden = Model.IsAdminUser ? "" : "hidden";
    <div class="checkbox" @Html.AttributeEncode(hidden)>
        <label @Html.AttributeEncode(hidden) style="@labelColor">
            @Html.CheckBoxFor(m => m.IsPublic) Make song public to all users?
            <span class="alert-danger">
                @Html.ValidationMessageFor(m => m.IsPublic)
            </span>
        </label>
    </div>

    <!-- Save Button -->
    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-success btn-lg btn-block center-block" />
    </div>

    @* Generate hidden form with cookie for client to check against
        when submitting the form in order to protect him from cross-
        site request forgery (CSRF) attakcs. *@
    @Html.AntiForgeryToken()
}

<!-- Song Index Redirection -->
<div>
    @Html.ActionLink("Back to Song List", "Index")
</div>

@* Enable Client Side Validations with JQuery of the Constraints Defined
    in the Data Annotation Attribiutes in the Model Class.  *@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}