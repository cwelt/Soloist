@model CW.Soloist.WebApplication.ViewModels.CompositionViewModel

@{
    ViewBag.Title = "Compose New Melody";
    string labelColor = "color:yellow;";
    string inputAlignStyle = "float: right;";
}

<div class="panel panel-success">
    <!-- Header -->
    <div class="panel-heading text-center" style="background-color:darkgoldenrod">
        <h1><b>Generate a New Solo-Melody Improvisation</b></h1>
    </div>

    <!-- HTML Form -->
    <div class="panel-body">
        @using (Html.BeginForm("Compose", "Composition"))
        {
            <div>
                <!-- Basic Composition Parameter Settings -->
                <div style="float:left">
                    <fieldset style="border: 2px groove; border-radius: 5px; padding: 5px 15px; margin-top: 5px; position:relative; border-width:3px 4px; width:88%">
                        <legend style="color:gold;">
                            Song Selection and Basic Composition Settings
                        </legend>

                        <!-- Song -->
                        <div class="form-group">
                            @Html.LabelFor(m => m.SongId, new { @class = "control-label", style = labelColor })
                            @Html.DropDownListFor(m => m.SongId, Model.SongSelectList, new { @class = "form-control", style = "width: 400px; max-width:90%;" })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.SongId)
                            </div>
                        </div>

                        <!-- Musical Instrument -->
                        <div class="form-group">
                            @Html.LabelFor(m => m.MusicalInstrument, new { @class = "control-label", style = labelColor })
                            @Html.EnumDropDownListFor(m => m.MusicalInstrument, new { @class = "form-control", style = "width: 400px; max-width:90%;" })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.MusicalInstrument)
                            </div>
                        </div>

                        <!-- Overall Note Duration Density Feeling -->
                        <div class="form-group">
                            @Html.LabelFor(m => m.OverallNoteDurationFeel, new { @class = "control-label", style = labelColor })
                            <div>
                                @Html.EnumDropDownListFor(m => m.OverallNoteDurationFeel, new { @class = "form-control" })
                                <div class="alert-danger">
                                    @Html.ValidationMessageFor(m => m.OverallNoteDurationFeel)
                                </div>
                            </div>
                        </div>

                        <!-- Pitch Range -->
                        <div class="form-group" style="display:inline-block;"></div>
                        <div class="form-group">
                            <!-- Minimum Pitch-->
                            <div style="display:inline-block;">
                                @Html.LabelFor(m => m.MinPitch, new { @class = "control-label", style = labelColor })
                                @Html.DropDownListFor(m => m.MinPitch, Model.PitchSelectList, new { @class = "form-control", style = "width:auto" })
                                <div class="alert-danger">
                                    @Html.ValidationMessageFor(m => m.MinPitch)
                                </div>
                            </div>

                            <!-- Maximum Pitch-->
                            <div style="display:inline-block;">
                                @Html.LabelFor(m => m.MaxPitch, new { style = "padding-left:50px; color:yellow;" })
                                @Html.DropDownListFor(m => m.MaxPitch, Model.PitchSelectList, new { @class = "form-control", style = "width:auto; margin-left:50px;" })
                                <div class="alert-danger">
                                    @Html.ValidationMessageFor(m => m.MaxPitch)
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>

                <!-- Melody Evaluators Proportional Weights -->
                <div>
                    <fieldset style="border: 2px groove; border-radius: 5px; padding:5px 15px; margin-top: 5px; position:relative; border-width:3px 4px; width:35%">
                        <legend style="color:gold;">
                            Melody Fitness Function Evaluators Proportional Weights
                        </legend>

                        <!-- Smooth Movement -->
                        <div>
                            @Html.LabelFor(m => m.SmoothMovement, new { style = labelColor })
                            @Html.TextBoxFor(m => m.SmoothMovement, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.SmoothMovement)
                            </div>
                        </div>

                        <!-- Extreme Interval -->
                        <div>
                            @Html.LabelFor(m => m.ExtremeIntervals, new { style = labelColor })
                            @Html.TextBoxFor(m => m.ExtremeIntervals, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.ExtremeIntervals)
                            </div>
                        </div>

                        <!-- Pitch Variety -->
                        <div>
                            @Html.LabelFor(m => m.PitchVariety, new { style = labelColor })
                            @Html.TextBoxFor(m => m.PitchVariety, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.PitchVariety)
                            </div>
                        </div>

                        <!-- Pitch Range -->
                        <div>
                            @Html.LabelFor(m => m.PitchRange, new { style = labelColor })
                            @Html.TextBoxFor(m => m.PitchRange, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.MaxPitch)
                            </div>
                        </div>

                        <!-- Contour Direction -->
                        <div>
                            @Html.LabelFor(m => m.ContourDirection, new { style = labelColor })
                            @Html.TextBoxFor(m => m.ContourDirection, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.ContourDirection)
                            </div>
                        </div>

                        <!-- Contour Stability -->
                        <div>
                            @Html.LabelFor(m => m.ContourStability, new { style = labelColor })
                            @Html.TextBoxFor(m => m.ContourStability, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.ContourStability)
                            </div>
                        </div>

                        <!-- Syncopation -->
                        <div>
                            @Html.LabelFor(m => m.Syncopation, new { style = labelColor })
                            @Html.TextBoxFor(m => m.Syncopation, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.Syncopation)
                            </div>
                        </div>

                        <!-- DensityBalance -->
                        <div>
                            @Html.LabelFor(m => m.DensityBalance, new { style = labelColor })
                            @Html.TextBoxFor(m => m.DensityBalance, new { size = "3", style = @inputAlignStyle })
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.DensityBalance)
                            </div>
                        </div>

                        <!-- AccentedBeats -->
                        <div>
                            @Html.LabelFor(m => m.AccentedBeats, new {style = labelColor })
                            @Html.TextBoxFor(m => m.AccentedBeats, new { size = "3", style = @inputAlignStyle})
                            <div class="alert-danger">
                                @Html.ValidationMessageFor(m => m.AccentedBeats)
                            </div>
                        </div>

                    </fieldset>
                </div>
            </div>
            <hr />

            <!-- Melody Seed Checkbox -->
            <div style="display: inline-block">
                <div class="checkbox">
                    <label class="control-label" style=@labelColor>
                        @Html.CheckBoxFor(m => m.useExistingMelodyAsSeed) Use Existing Melody As Seed?
                        <br />(This option is relevant only if this song indeed contains a melody track)
                        <span class="alert-danger">
                            @Html.ValidationMessageFor(m => m.useExistingMelodyAsSeed)
                        </span>
                    </label>
                </div>
            </div>

            <!-- Submit Form Button -->
            <div>
                <hr />
                <div class="text-center">
                    <input class="btn btn-warning btn-lg" type="submit" value="Compose!" />
                </div>
            </div>

            @* Generate hidden form with cookie for client to check against
                when submitting the form in order to protect him from cross-
                site request forgery (CSRF) attakcs. *@
            @Html.AntiForgeryToken()
        }
    </div>
</div>

@* Enable Client Side Validations with JQuery of the Constraints Defined
    in the Data Annotation Attribiutes in the Model Class.  *@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}

